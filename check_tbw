#!/usr/bin/perl
#
# check_tbw  -  Check smartctl data against given tresholds
#
# Copyright (C) 2021 Maxim Smirnov: <qmbqx8gh@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#


use strict;
use warnings;
use vars qw($PROGNAME $VERSION $FREECMD $UNIT);

sub load_module {
    my @names = @_;
    my $module;
    for my $name (@names) {
        my $file = $name;
        # requires need either a bare word or a file name
        $file =~ s{::}{/}gsxm;
        $file .= '.pm';
        eval {
            require $file;
            $name->import();
            $module = $name;
		};
		last if $module;
    }
    return $module;
}

my $plugin_module;
BEGIN {
	$plugin_module = load_module( 'Monitoring::Plugin', 'Nagios::Plugin' );
}

$PROGNAME = "check_tbw";
$VERSION  = '1.0.0';
my $SMARTCMD = 'sudo /usr/sbin/smartctl';
my $NVMECMD = 'sudo /usr/sbin/nvme';
my $DEVICE   = '/dev/sda';
my $PARAMNO  = '233';
my $SCALE    = '1';

my $np = $plugin_module->new(
  usage => "Usage: %s [ -w <warning_threshold> ] [ -c <critical_threshold> ]\n"
    . '   -d <device path>'
    . '   -n <smartctl param number or nvme>'
    . '   [ -s <smartctl param scale> ]'
    ,
  version => $VERSION,
  plugin  => $PROGNAME,
  blurb => 'Check smartctl data against given tresholds',
  timeout => 30,
);

$np->add_arg(
  spec => 'warning|w=s',
  help => "-w, --warning=THRESHOLD\n"
    . "   Warning threshold for TBW. Uee\n"
    . "   hdparm -i /dev/sdX \n"
    . "   to find manufacturer data.\n"
    ,
  required => 0,
);

$np->add_arg(
  spec => 'critical|c=s',
  help => "-c, --critical=THRESHOLD\n"
    . "   Critical threshold TBW.\n"
    ,
  required => 0,
);

$np->add_arg(
  spec => 'device|d=s',
  help => "-d, --device=/dev/sdX\n"
    . "   Path to device\n",
  default => $DEVICE,
  required => 1,
);

$np->add_arg(
  spec => 'num|n=s',
  help => "-n, --num=XXX\n"
    . "   smartctl parameter number. something like:\n"
    . "   - Total_NAND_Writes_GiB\n"
    . "   - Media_Wearout_Indicator\n"
    . "   - Total_LBAs_Written\n"
    ,
  default => $PARAMNO,
  required => 1,
);

$np->add_arg(
  spec => 'scale|s=n',
  help => "-s, --scale=32\n"
    . "   Scale to be applyed to the parameter value.\n",
  default => $SCALE,
  required => 0,
);

$np->add_arg(
  spec => 'verbose',
  help => "--verbose\n"
    . "   Debug output.\n",
  required => 0,
);

$np->getopts;

# Assign, then check args

my $device = $np->opts->device;
my $paramno = $np->opts->num;
my $scale = $np->opts->scale;
my $verbose = $np->opts->verbose;

# Would better fit later but doing it here validates thresholds
my $warning = $np->opts->warning;
my $critical = $np->opts->critical;
$np->set_thresholds(
    warning => ((defined($warning) && $warning !~ /^\d+%$/) ? $warning : undef),
    critical => ((defined($critical) && $critical !~ /^\d+%$/) ? $critical : undef),
);

# Better safe than sorry
alarm $np->opts->timeout;

my $value;
unless ($paramno eq 'nvme') {
  # We always get bytes, then calculate units ourselves
  warn("Running: '$SMARTCMD -A $device'\n") if ($verbose);
  open(RESULT, "$SMARTCMD -A $device|")
    or $np->nagios_exit('CRITICAL', "Could not run $SMARTCMD");

  warn("Output from $SMARTCMD:\n") if ($verbose > 1);
  while (<RESULT>) {
    warn("  $_") if ($verbose > 1);
    # New `free` output from procps doesn't provide "buffers/cache" anymore, but
    # provides a better estimate of available memory ("available" column).
    if (/^\s*$paramno\s(.+)$/) {
      my @data = split(/\s+/, $1);
      $value = $data[8];
    }
  }

  close(RESULT);
  alarm(0);
  $np->nagios_exit('CRITICAL', "Unable to interpret '$SMARTCMD' output") if (!defined($value));
} else {
  # always in thousands of 512 bytes units
  $scale = 1 / (512 * 1000 / 1024 / 1024 / 1024 / 1024);
  # We always get bytes, then calculate units ourselves
  warn("Running: '$NVMECMD smart-log $device'\n") if ($verbose);
  open(RESULT, "$NVMECMD smart-log $device|")
    or $np->nagios_exit('CRITICAL', "Could not run $NVMECMD");

  warn("Output from $NVMECMD:\n") if ($verbose > 1);
  while (<RESULT>) {
    warn("  $_") if ($verbose > 1);
    # New `free` output from procps doesn't provide "buffers/cache" anymore, but
    # provides a better estimate of available memory ("available" column).
    if (/^\s*data_units_written\s*:\s*(.+)\s*$/) {
      my $data = $1;
      warn("raw data: $data\n") if ($verbose > 1);
      $data =~ s/[^0-9]//g;
      warn("value: $data\n") if ($verbose > 1);
      $value = $data;
    }
  }

  close(RESULT);
  alarm(0);
  $np->nagios_exit('CRITICAL', "Unable to interpret '$NVMECMD' output") if (!defined($value));
}

my $tbw = sprintf('%.3f', $value/$scale);

$np->set_thresholds(
  warning => ':'.$warning,
  critical => ':'.$critical,
);

$np->add_perfdata(
  label => "Tbw",
  value => $tbw,
  uom => 'Tb',
  threshold => $np->threshold,
);

$np->nagios_exit($np->check_threshold($tbw), "$tbw Tbw");

